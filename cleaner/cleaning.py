# -*- coding: utf-8 -*-

#
#   Allowed characters a-zA-Z'äüö
#

import os

lang = 'de'
def get_letters(path):

    all_row = []
    with open('cleaner/' + str(lang) + '/' + str(path)) as f:
        lines = f.read()
        lines = str(lines).split('\n')


        if lines[0] == '' or lines[0] == '\n' or lines[0] == ' ':
            pass
        else:
            for line in lines: 
                    #just in case
                row = []
                if line == '' or line == '\n' or line == ' ':
                    pass
                else:
                    values = str(line).split('>')
                    letter = values[0]
                    change = values[1]
                    if values[1] == 'None' or values[1] == '':
                        change = ''
                    else:
                        row.append(letter)
                        row.append(change)
                        all_row.append(all_row)



    return all_row

def get_replacer2():
    if os.path.isfile('cleaner/' + str(lang) + '/' + 'order.txt') == True:
        path = 'cleaner/' + str(lang) + '/' + 'order.txt'
    else:
        if os.path.isfile('cleaner/' + str(lang) + '/' + 'order') == True:
            path = 'cleaner/' + str(lang) + '/' + 'order'
        else:
            print('no order file found!')

    replacer = []
    replacer_path = []
    with open(path) as f:
        lines = f.read()
        lines = str(lines).split('\n')
        for line in lines: 
            if os.path.isfile('cleaner/' + str(lang) + '/' + str(line)) == True:
                replacer_path.append('cleaner/' + str(lang) + '/' + str(line))  
            elif os.path.isfile('cleaner/' + str(lang) + '/' + str(line).replace('txt','')) == True:
                replacer_path.append('cleaner/' + str(lang) + '/' + str(line).replace('txt',''))  
            elif os.path.isfile('cleaner/' + str(lang) + '/' + str(line) + '.txt') == True:
                replacer_path.append('cleaner/' + str(lang) + '/' + str(line) + '.txt') 

    for path in replacer_path: 
        with open(path) as f:
            lines = f.read()
            lines = str(lines).split('\n')
            for line in lines: 
                if line == 'upper' or line == 'lower':
                    replacer.append(line)
                else:
                    replacer.append(get_letters(path))
    

    return replacer                
def get_replacer():


    
    #possible normal letters
    sentence_replace = {
        'à': 'a',
        'á': 'a',
        'â': 'a',
        'а': 'a',
        'ã': 'a',
        'å': 'a',
        'ā': 'a',
        'ă': 'a',
        'ą': 'a',
        'ǟ': 'a',
        'ǡ': 'a',
        'ǻ': 'a',
        'ȁ': 'a',
        'ȃ': 'a',
        'ȧ': 'a',
        'æ': 'ä',
        'ǣ': 'ä',
        'ǽ': 'ä',
        'ç': 'c',
        'ć': 'c',
        'ĉ': 'c',
        'ċ': 'c',
        'č': 'c',
        'ď': 'd',
        'đ': 'd',
        'è': 'e',
        'é': 'e',
        'ê': 'e',
        'ë': 'e',
        'ē': 'e',
        'ĕ': 'e',
        'ė': 'e',
        'ę': 'e',
        'ě': 'e',
        'ȅ': 'e',
        'ȇ': 'e',
        'ȩ': 'e',
        'ε': 'e',
        'ĝ': 'g',
        'ğ': 'g',
        'ġ': 'g',
        'ģ': 'g',
        'ǥ': 'g',
        'ǧ': 'g',
        'ǵ': 'g',
        'ĥ': 'h',
        'ħ': 'h',
        'ȟ': 'h',
        'ì': 'i',
        'í': 'i',
        'î': 'i',
        'ï': 'i',
        'ĩ': 'i',
        'ī': 'i',
        'ĭ': 'i',
        'į': 'i',
        'ı': 'i',
        'ȉ': 'i',
        'ȋ': 'i',
        'ĵ': 'j',
        'ǰ': 'j',
        'ķ': 'k',
        'ĸ': 'k',
        'ǩ': 'k',
        'ǩ': 'k',
        'κ': 'k',
        'ĺ': 'l',
        'ļ': 'l',
        'ľ': 'l',
        'ŀ': 'l',
        'ł': 'l',
        'м': 'm',
        'ñ': 'n',
        'ń': 'n',
        'ņ': 'n',
        'ň': 'n',
        'ŉ': 'n',
        'ŋ': 'n',
        'ǹ': 'n',
        'ò': 'o',
        'ó': 'o',
        'ô': 'o',
        'õ': 'o',
        'ø': 'o',
        'ō': 'o',
        'ŏ': 'o',
        'ő': 'o',
        'ǫ': 'o',
        'ǭ': 'o',
        'ǿ': 'o',
        'ȍ': 'o',
        'ȏ': 'o',
        'ð': 'o',
        'ο': 'o',
        'œ': 'ö',
        'ŕ': 'r',
        'ŗ': 'r',
        'ř': 'r',
        'ȑ': 'r',
        'ȓ': 'r',
        'ś': 's',
        'ŝ': 's',
        'ş': 's',
        'š': 's',
        'ș': 's',
        'ţ': 't',
        'ť': 't',
        'ŧ': 't',
        'ț': 't',
        'ù': 'u',
        'ú': 'u',
        'û': 'u',
        'ũ': 'u',
        'ū': 'u',
        'ŭ': 'u',
        'ů': 'u',
        'ű': 'u',
        'ų': 'u',
        'ȕ': 'u',
        'ȗ': 'u',
        'ŵ': 'w',
        'ý': 'y',
        'ÿ': 'y',
        'ŷ': 'y',
        'ź': 'z',
        'ż': 'z',
        'ž': 'z',
        'ȥ': 'z',
        'Ä': 'ä',
        'Ü': 'ü',
        'Ö': 'ö',
        'Î': 'i',
        'Ç': 'c',
        'ɑ': 'a',
        'Á': 'a',
        'Å': 'a',
        'ɕ': 'c',
        'ἐ': 'e',
        'ɛ': 'e',
        'е': 'e',
        'É': 'e',
        'Ἰ': 'i',
        'İ': 'i',
        'Œ': 'e',
        'Ō': 'o',
        'Ś': 's',
        'Š': 's',
        'ῦ': 'u',
        'α': 'a',
        'ά': 'a',
        'β': 'ß',
        'η': 'n',
        'θ': '0',
        'ί': 'i',
        'μ': 'u',
        'π': 'a',
        'π': 'n',
        'ρ': 'p',
        'ς': 'c',
        'σ': 'o',
        'ύ': 'u',
        'ы': 'u',
        'φ': 'o',
        'Б': 'b',
        'в': 'b',
        'з': 'e',
        'и': 'n',
        'й': 'n',
        'к': 'k',
        'ч': 'y',
        'ɪ': 'i',
        'ɪ̯': 'i',
        'ä': 'ä',
        ' ̇': '',
        'ü': 'ü'
    }
    
    #all abbreviations
    abbreviations = {
        ' a. a. O. ': ' am angegebenen Ort ',
        ' Abb. ': ' Abbildung ',
        ' Abh. ': ' Abhandlung ',
        ' Abk. ': ' Abkürzung ',
        ' allg. ': ' allgemein ',
        ' bes. ': ' besonders ',
        ' bez. ': ' bezahlt ',
        ' Bez. ': ' Bezeichnung ',
        ' bzw. ': ' beziehungsweise ',
        ' eigtl. ': ' eigentlich ',
        ' erg. ': ' ergänze ',
        ' geb. ': ' geboren ',
        ' gegr. ': ' gegründet ',
        ' Ggs. ': ' Gegensatz ',
        ' i. e. S. ': ' im engeren Sinne ',
        ' i. w. S. ': ' im weiteren Sinne ',
        ' jmd. ': ' jemand ',
        ' jmdm. ': ' jemandem ',
        ' jmdn. ': ' jemanden ',
        ' jmds. ': ' jemandes ',
        ' o. Ä. ': ' oder Ähnliches ',
        ' u. ': ' und ',
        ' u. a. ': ' unter anderem ',
        ' u. U. ': ' unter Umständen ',
        ' u. Ä. ': ' und Ähnliche ',
        ' übertr. ': ' übertragen ',
        ' u. dgl. ': ' und dergleichen ',
        ' ugs. ': ' umgangssprachlich ',
        ' urspr. ': ' ursprünglich ',
        ' usw. ': ' und so weiter ',
        ' zz. ': ' zurzeit ',
        ' zzt. ': ' zurzeit ',
        ' Buchw. ': ' Buchwesen ',
        ' dt. ': ' deutsch ',
        ' Spr. ': ' Sprache ',
        ' Sprachw. ': ' Sprachwissenschaft ',
        ' Zus. ': ' Zusammensetzung ',
        ' afrik. ': ' afrikanisch ',
        ' Astrol. ': ' Astrologie ',
        ' amerik. ': ' amerikanisch ',
        ' argent. ': ' argentinisch ',
        ' ev. ': ' evangelisch ',
        ' Jh. ': ' Jahrhundert ',
        ' evang. ': ' evangelisch ',
        ' bayr. ': ' bayrisch ',
        ' hebr. ': ' hebräisch ',
        ' chin. ': ' chinesisch ',
        ' hl. ': ' heilig ',
        ' dt. ': ' deutsch ',
        ' Dtschl. ': ' Deutschland ',
        ' kath. ': ' katholisch ',
        ' europ. ': ' europäisch ',
        ' lat. ': ' lateinisch ',
        ' Frk. ': ' Frankreich ',
        ' luth. ': ' lutherisch ',
        ' frz. ': ' französisch ',
        ' Hst. ': ' Hauptstadt ',
        ' Myth. ': ' Mythologie ',
        ' jap. ': ' japanisch ',
        ' natsoz. ': ' nationalsozialistisch ',
        ' ndrl. ': ' niederländisch ',
        ' n. Chr. ': ' nach Christus ',
        ' n.Chr. ': ' nach Christus ',
        ' norw. ': ' norwegisch ',
        ' österr. ': ' österreichisch ',
        ' Philos. ': ' Philosophie ',
        ' Österr. ': ' Österreich ',
        ' prot. ': ' protestantisch ',
        ' port. ': ' portugiesisch ',
        ' portug. ': ' portugiesisch ',
        ' relig. ': ' religiös ',
        ' schweiz. ': ' schweizerisch ',
        ' Relig. ': ' Religion ',
        ' skand. ': ' skandinavisch ',
        ' Theol. ': ' Theologie ',
        ' tschech. ': ' tschechisch ',
        ' v. Chr. ': ' vor Christus ',
        ' v.Chr. ': ' vor Christus ',
        ' Anat. ': ' Anatomie ',
        ' Bankw. ': ' Bankwesen ',
        ' Archit. ': ' Architektur ',
        ' Bgb. ': ' Bergbau ',
        ' Astron. ': ' Astronomie ',
        ' Elektr. ': ' Elektrotechnik ',
        ' Biol. ': ' Biologie ',
        ' Forstw. ': ' Forstwesen ',
        ' Bot. ': ' Botanik ',
        ' Fot. ': ' Fotografie ',
        ' Chem. ': ' Chemie ',
        ' Landw. ': ' Landwirtschaft ',
        ' Geol. ': ' Geologie ',
        ' Mio. ': ' Millionen ',
        ' Math. ': ' Mathematik ',
        ' Rechtsw. ': ' Rechtswesen ',
        ' Med. ': ' Medizin ',
        ' Seew. ': ' Seewesen ',
        ' Meteor. ': ' Meteorologie ',
        ' Sp. ': ' Sport ',
        ' Phys. ': ' Physik ',
        ' Tech. ': ' Technik ',
        ' Psych. ': ' Psychologie ',
        ' Wirtsch. ': ' Wirtschaft ',
        ' Soziol. ': ' Soziologie ',
        ' Wiss. ': ' Wissenschaft ',
        ' Zool. ': ' Zoologie '
    
    }
    
    
    #numerical adverbs till 32
    num_adverbs = {
        ' 1. ': ' erster ',
        ' 2. ': ' zweiter ',
        ' 3. ': ' dritter ',
        ' 4. ': ' vierter ',
        ' 5. ': ' fünfter ',
        ' 6. ': ' sechster ',
        ' 7. ': ' siebter ',
        ' 8. ': ' achter ',
        ' 9. ': ' neunter ',
        ' 10. ': ' zehnter ',
        ' 11. ': ' elter ',
        ' 12. ': ' zwölfter ',
        ' 13. ': ' dreizehnter ',
        ' 14. ': ' vierzehnter ',
        ' 15. ': ' fünfzehnter ',
        ' 16. ': ' sechzehnter ',
        ' 17. ': ' siebzehnter ',
        ' 18. ': ' achtzehnter ',
        ' 19. ': ' neunzehnter ',
        ' 20. ': ' zwanzigster ',
        ' 21. ': ' einundzwanzigster ',
        ' 22. ': ' zweiundzwanzigster ',
        ' 23. ': ' dreiundzwanzigster ',
        ' 24. ': ' vierundzwanzigster ',
        ' 25. ': ' fünfundzwanzigster ',
        ' 26. ': ' sechsundzwanzigster ',
        ' 27. ': ' siebenundzwanzigster ',
        ' 28. ': ' achtundzwanzigster ',
        ' 29. ': ' neunundzwanzigster ',
        ' 30. ': ' dreißigster ',
        ' 31. ': ' einundreißigster ',
        ' 32. ': ' zweiundreißigster '
    }
    
    
    #some used special characters  
    special_replacers = {
        '$': ' dollar ',
        '£': ' pfund ',
        '€': ' euro ',
        'm³': 'kubikmeter',
        'km²': ' quadratkilometer ',
        'm²': ' quadratmeter ',
        '¾': ' drei viertel',
        '½': ' ein einhalb',
        '¼': ' ein viertel',
        '°c': ' grad ',
        'ºc': ' grad ',
        '§': ' paragraph ',
        '&': ' und ',
        '%': ' prozent ',
        ' ghz ': ' gigahertz ' ,
        ' cm ': ' centimeter ' ,
        ' m ': ' meter ', 
        '=': ' gleich ' 
    
    }
    

    #in case words are directly before and after symbol
    #many are pointless.... they get removed all together
    spaces = {
        '.': ' ',
        '?': ' ',
        '	': ' ',
        '-': ' ',
        ':': ' ',
        '/': ' ',
        '\\': ' ',
        '\'': ' ',
        '"': ' ',
        '_': ' ',
        ';': ' ',
        '»': ' ',
        '«': ' ',
        '!': ' ',
        '|': ' ',
        '[': ' ',
        ']': ' ',
        '(': ' ',
        ')': ' ',
        '{': ' ',
        '}': ' ',
        '„': ' ',
        '=': ' ',
        '`': '',
        '˛': ' ',
        '“': ' ',
        '~': ' ',
        '‘': '',
        'ʻ': '',
        '-': ' ',
        '_': ' ',
        '›': ' ',
        '’': '',
        '*': ' ',
        ';': ' ',
        '°': ' ',
        'º': ' ',
        '|': ' ',
        '#': ' ',
        '“': ' ',
        '³': ' ',
        '²': ' ',
        '^': ' ',
        '+': ' ',
        '‹': ' ',
        '–': ' ',
        '…': ' ',
        'u\'\xad\'': ' ',
        '†': '',
        '—': '',
        'ˌ': '',
        'ɪ': 'i',
        'ˈ': '',
        'ʃ': '',
        'ə': '',
        'ɹ': '',
        'ɪ̯': 'i',
        '´': '',
        'ä': 'ä',
        'ü': 'ü',
        '≈': '',
        '≠': '',
        '≡': '',
        '·': '',
        '−': '',
        'Î': 'i',
        'ʻ': '',
        'Ç': 'c',
        '†': '',
        '*': '',
        '×': '',
        '≥': '',
        '¡': '',
        '±': '',
        '→': '',
        'ː': '',
        'り': '',
        'ɑ': 'a',
        'Á': 'a',
        'Å': 'a',
        'ɕ': 'c',
        'ἐ': 'e',
        'ɛ': '',
        'É': 'e',
        'Ἰ': 'i',
        'İ': 'i',
        'Œ': 'e',
        'Ō': 'o',
        'ſ': '',
        'Ś': 's',
        'Š': 's',
        'ῦ': 'u',
        'ʒ': '',
        'α': 'a',
        'ά': 'a',
        'γ': '',
        'Δ': '',
        'δ': '',
        'η': 'n',
        'θ': '0',
        'ι': '',
        'ί': 'i',
        'λ': '',
        'μ': 'u',
        'π': 'a',
        'π': 'n',
        'ρ': 'p',
        'ς': 'c',
        'σ': 'o',
        'τ': '',
        'ύ': 'u',
        'φ': 'o',
        'Б': 'b',
        'в': 'b',
        'з': 'e',
        'и': 'n',
        'й': 'n',
        'к': 'k',
        '乾': '',
        '六': '',
        '兼': '',
        '園': '',
        '塔': '',
        '引': '',
        '支': '',
        '放': '',
        '日': '',
        '普': '',
        '本': '',
        '枝': '',
        '條': '',
        '清': '',
        '濁': '',
        '生': '',
        '盤': '',
        '石': '',
        '碁': '',
        '糸': '',
        '納': '',
        '解': '',
        '豆': '',
        '通': '',
        '酒': '',
        '麺': '',
        '해': '',
        '방': '',
        '탑': '',
        'υ': '',
        'т': '',
        'ч': 'y',
        "'̇" : '',
        "'" : '',
        'б': '',
        'Л': '',
        ' ̇': '',
        'ю': '',
        '”': ' ',
        '   ': ' ',
        '   ': ' ' ,
        '  ': ' '


    }



    return [abbreviations,num_adverbs,special_replacers,sentence_replace,spaces]
    

